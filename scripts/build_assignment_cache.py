#!/usr/bin/env python3
"""Generate the frontend cache module from the current assignment types."""

from __future__ import annotations

import importlib.util
import json
import sys
from datetime import datetime, timezone
from pathlib import Path

ROOT = Path(__file__).resolve().parent.parent
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))

spec = importlib.util.spec_from_file_location(
    "type_store_module", ROOT / "app" / "services" / "type_store.py"
)
if spec is None or spec.loader is None:
    raise RuntimeError("Unable to locate app.services.type_store")
type_store = importlib.util.module_from_spec(spec)
spec.loader.exec_module(type_store)  # type: ignore[arg-type]

OUTPUT_PATH = ROOT / "AssignmentCalculator" / "public" / "cache.ts"
SRC_OUTPUT_PATH = ROOT / "AssignmentCalculator" / "src" / "generated" / "cache.ts"
HEADER = "// This file is auto-generated by scripts/build_assignment_cache.py\n" \
         "// Do not edit directly.\n\n"
DEFAULT_ICON = "DocumentTextIcon"


def _normalise_types() -> list[dict[str, object]]:
    records: list[dict[str, object]] = []
    for doc in type_store.list_types().values():
        milestones = list(doc.get("milestones") or [])
        normalised = {
            "id": doc["id"],
            "title": doc.get("title") or doc["id"].title(),
            "description": doc.get("description"),
            "icon": doc.get("icon") or DEFAULT_ICON,
            "milestones": [
                {
                    "name": m["name"],
                    "effort_percent": int(m.get("effort_percent") or 0),
                    **({"description": m.get("description")} if m.get("description") is not None else {}),
                    **({"resources": m.get("resources")} if m.get("resources") else {}),
                }
                for m in milestones
            ],
        }
        records.append(normalised)
    records.sort(key=lambda item: item["title"])
    return records


def main() -> None:
    records = _normalise_types()
    generated_at = datetime.now(timezone.utc).isoformat().replace("+00:00", "Z")

    OUTPUT_PATH.parent.mkdir(parents=True, exist_ok=True)
    SRC_OUTPUT_PATH.parent.mkdir(parents=True, exist_ok=True)
    assignments_json = json.dumps(records, indent=2, ensure_ascii=False)
    content = (
        HEADER
        + f"export const assignmentTypes = {assignments_json};\n\n"
        + f"export const generatedAt = \"{generated_at}\";\n"
    )
    OUTPUT_PATH.write_text(content, encoding="utf-8")
    SRC_OUTPUT_PATH.write_text(content, encoding="utf-8")

    type_store.record_generated_at(generated_at)

    print(f"Wrote {OUTPUT_PATH.relative_to(ROOT)} and {SRC_OUTPUT_PATH.relative_to(ROOT)} with {len(records)} assignment types.")


if __name__ == "__main__":
    main()
